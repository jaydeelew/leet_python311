# 0. Prefix Sum
# Given an array, return a new array containing the running sum.
arr = [1, 2, 3, 4, 5]
# Output: [1, 3, 6, 10, 15]

# 344. Reverse String
# Write a function that reverses a string. The input string is given as an array of characters s.
# You must do this by modifying the input array in-place with O(1) extra memory.
["h","e","l","l","o"]
# Output: ["o","l","l","e","h"]

# 78. Subsets
# Given an integer array nums of unique elements, return all possible
# subsets (the power set).
# The solution set must not contain duplicate subsets: e.g. [1, 2] and [2, 1].
nums = [1, 2]
# Output: [[], [1], [2], [1, 2]]

# 392. Is Subsequence
# Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
# A subsequence of a string is a new string that is formed from the original string by
# deleting some (can be none) of the characters without disturbing the relative positions
# of the remaining characters.
s = "abc"
t = "ahbgdc"
# Output: True

# 46. Permutations
# Given an array nums of distinct integers, return all the possible permutations.
nums = [1, 2, 3]
# Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]].

# 704. Binary Search
# Given an array of integers nums which is sorted in ascending order,
# and an integer target, write a function to search target in nums.
# If target exists, then return its index. Otherwise, return -1.
# You must write an algorithm with O(log n) runtime complexity.
nums = [1, 2, 3, 4, 5]
target = 3
# Output: 2

# 0. Find Minimum Value That Satisfies a Condition
# Given a sorted array and a condition, find the minimum value in the array that satisfies the condition
# When finding the minimum, all values after it, including the minimum, would meet the condition,
# and all values before it would not meet the condition.
# This assumes the array is sorted.
arr = [1, 3, 5, 7, 9, 11]
condition = lambda x: x > 6
# Output: 7

# 0. Find Maximum Value That Satisfies a Condition
# Given a sorted array and a condition, find the maximum value in the array that satisfies the condition.
# A maximum would have all values before it, including the maximum, meet the condition.
# All values after the maximum would not meet the condition.
# This assumes the array is sorted.
arr = [1, 3, 5, 7, 9, 11]
condition = lambda x: x < 6
# Output: 5

# 0. TrieNose class
# Make a Trie class with methods for insert, locate, search, remove, and starts_with:
class TrieNode:
    def __init__(self):
        self.children = {}
        self.end_of_word = False
arr = ["arm", "arms", "at", "be", "bet"]

# 0. Dijkstra's Algorithm
# Implement Dijkstra's algorithm to find the shortest path between two nodes in a graph.
# The graph is represented as an adjacency list and the algorithm should return a dictionary of
# keys as nodes and values as the shortest distance from the start node to that node.
adj_list = {
    "S": {"A": 8, "B": 4},
    "A": {"B": 4},
    "B": {"A": 3, "C": 2, "D": 5},
    "C": {"D": 2},
    "D": {},
}
starting_node = "S"
# Output: {'S': 0, 'A': 7, 'B': 4, 'C': 6, 'D': 8}

# 0. Build Adjacency List
# Build an undirected adjacency list from list of edges.
edges = [(0, 1), (0, 3), (1, 3), (2, 3), (3, 5)]
# Output = {0: [1, 3], 1: [0, 3], 3: [0, 1, 2, 5], 2: [3], 5: [3]}

# 560. Subarray Sum Equals K
# Given an array of integers nums and an integer k,
# return the total number of subarrays whose sum equals to k.
# A subarray is a contiguous non-empty sequence of elements within an array.
# Integers can be negative where the sum of the elements in the subarray equals k. Integers can be positive and negative.
nums = [1, 2, 3, 4, 5]
k = 3
# Output: 2

# 0. Shortest Path Between Two Nodes
# Given a network of friends in the form of an adjacency list listing each person's list of friends,
# return the shortest path between them.
network = {
    "Min": ["William", "Jayden", "Omar"],
    "William": ["Min", "Noam"],
    "Jayden": ["Min", "Amelia", "Ren", "Noam"],
    "Ren": ["Jayden", "Omar"],
    "Amelia": ["Jayden", "Adam", "Miguel"],
    "Adam": ["Amelia", "Miguel", "Sofia", "Lucas"],
    "Miguel": ["Amelia", "Adam", "Liam", "Nathan"],
    "Noam": ["Nathan", "Jayden", "William"],
    "Omar": ["Ren", "Min", "Scott"],
}
start = "Jayden"
end = "Adam"
# Output: ['Jayden', 'Amelia', 'Adam']

0. List Levels in Graph
# Given a graph (in adjacency list form) and a starting node, list the contents of each level starting with the starting node.
directed = {0: [1, 2, 5], 1: [7], 2: [3, 4], 4: [3], 3: [6], 7: [0], 5: [], 6: []}
undirected = {0: [1, 2, 5, 7], 1: [0, 7], 2: [0, 3, 4], 5: [0], 7: [1, 0], 3: [2, 4, 6], 4: [2, 3], 6: [3]}
start_node = 0
# Output Directed Graph = [[0], [1, 2, 5], [7, 3, 4], [6]]
# Output Undirected Graph = [[0], [1, 2, 5, 7], [3, 4], [6]]

0. Rightmost Insert List With Duplicates
# Given a sorted array and a target, return index of rightmost insertion point when duplicates are allowed.
# This function will return the index just after the last duplicate,
# otherwise, the index of the next highest value.
nums = [1, 2, 3, 3, 3, 4, 5]
target = 3
# Output: 5

# 0. Max Depth of Graph
# Given a directed acyclic graph (in adjacency list form) and a starting node,
# return the maximum depth of the graph from starting node to a leaf.
adj_list = {0: [2, 3], 1: [], 2: [], 3: [1]}
start_node = 0
# Output: 2

# 876. Middle of the Linked List
# Given a linked list of nodes where each node has a value and a next pointer,
# return the middle node of the linked list. If the linked list has an even number of nodes,
# return the second/right middle node.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
# Output: 3

# 438. Find All Anagrams in a String
# Given a string and a substring, return the number of times a substring appears in a string.
string = "ABCDCDC"
sub_string = "CDC"
# Output: 2

# 1. Two Sum
# * Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
# You may assume that each input would have exactly one solution, and you may not use the same element twice.
# You can return the answer in any order.
nums = [3, 2, 4]
target = 6
# Output: [1,2]

# Given an array of integers and an integer k,
# return the number of subarrays where the sum of the elements in the subarray equals k.
nums = [1, 2, 3, 4, 5]
k = 3
# Output: 2

# Given an array of integers, find the top k elements that are closest to target.
arr = [3, 6, 7, 2, 9, 4]
k = 3
target = 5
# Output: [6, 7, 4]

# Given a linked list of nodes where each node has a value and a next pointer,
# determine if the linked list has a cycle.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
five.next = one
# Output: True

# Given a singly linked list, reverse the list and return the head of the reversed list.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
# Output: 5 -> 4 -> 3 -> 2 -> 1

# Given an integer array, return a monotonic increasing stack of the array.
arr = [1, 4, 5, 3, 3, 12, 10]
# Output: [1, 3, 10]

# Given an array of characters, reverse the array in-place.
s = ["h", "e", "l", "l", "o"]
# Output: ["o", "l", "l", "e", "h"]

# Given two sorted integer arrays, return an array that combines both of them and is also sorted in O(n+m) time.
arr1 = [1, 4, 7, 20]
arr2 = [3, 5, 6]
# Output: [1, 3, 4, 5, 6, 7, 20]


# Given the root of a binary tree, return the levels of the tree from root on down in a list of lists.
class TreeNode:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


nine = TreeNode(9)
seven = TreeNode(7)
four = TreeNode(4)
eight = TreeNode(8, nine)
twelve = TreeNode(12, four)
three = TreeNode(3, twelve, seven)
five = TreeNode(5, eight, three)  # root node
# Output: [[5], [8, 3], [9, 12, 7], [4]]

# Given an array of positive integers nums and an integer k,
# find the length of the longest subarray whose sum is less than or equal to k.
nums = [1, 2, 3, 4, 5]
k = 10
# Output: 4

# Implement Dijkstra's algorithm to find the shortest path between two nodes in a graph.
# The graph is represented as an adjacency matrix and the algorithm should return a dictionary of
# keys as nodes and values as the shortest distance from the start node to that node.
adj_matrix = [
    [0, 8, 4, 0, 0],
    [0, 0, 4, 0, 0],
    [0, 3, 0, 2, 5],
    [0, 0, 0, 0, 2],
    [0, 0, 0, 0, 0],
]
starting_node = 0
# Output: {0: 0, 1: 7, 2: 4, 3: 6, 4: 8}

# Given an array of integers, find the top k elements in arr.
arr = [3, 6, 7, 2, 9, 4]
k = 3
# Output: [6, 7, 9]

# Given an integer array nums, return the length of the longest strictly increasing subsequence.
# The term strictly means that there are not any duplicates in the subsequence.
# Provide the Bottom-Up Iterative Tabulation solution.
# Provide the Top-Down Recursive Memoization solution.
nums = [10, 9, 2, 5, 3, 7, 101, 18]
# Output: 4

# Given an array of unsorted integers, return the kth largest element in arr.
arr = [3, 6, 7, 2, 9, 4]
k = 3
# Output: 6

# Given an array of integers and an integer k, return all subsequences with sum k.
nums = [1, 2, 3, 4, 5]
k = 5
# Output: [[1, 4], [2, 3], [5]]

# Given an array nums of size n, return the majority element.
# The majority element is the element that appears more than n / 2 times.
# You may assume that the majority element always exists in the array.
nums = [2, 2, 1, 1, 1, 2, 2]
# Output: 2

# Perform a DFS on a binary tree using an iterative approach. Return the pre-order traversal of the tree's nodes.
# Perform a DFS on a binary tree using an recursive approach. Return the pre-order traversal of the tree's nodes.
nine = TreeNode(9)
seven = TreeNode(7)
four = TreeNode(4)
eight = TreeNode(8, nine)
twelve = TreeNode(12, four)
three = TreeNode(3, twelve, seven)
five = TreeNode(5, eight, three)  # root node
# Output: 5 8 9 3 12 4 7

# Write a function that determines if a given number is a perfect square.
# It takes an integer `num` as a parameter and returns a boolean value.
# The function returns `True` if `num` is a perfect square, otherwise it returns `False`.
num = 16
# Output: True

# Find the square root of a number using binary search
num = 16
# Output: 4

# Given a singly linked list, return the value of the kth node from the end of the list.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
k = 2
# Output: 4

# Given two strings, a and b, return True if a is a subset of b, otherwise return False.
a = "3 1 9 9"
b = "5 0 7 9 4 1 3 9 6"
# Output: True

# Given a directed acyclic graph (in adjacency list form) and a starting node,
# return the maximum sum of the graph from starting node to a leaf.
adj_list = {0: [2, 3], 1: [], 2: [], 3: [1]}
start = 0
# Output: 4

# Given a sorted array, return index of leftmost insertion point when duplicates are allowed
# This function will return the index of the first duplicate,
# otherwise, the index of the next highest value.
nums = [1, 2, 3, 3, 3, 4, 5]
target = 3
# Output: 2

# Given a list of numbers with duplicate values, return the most common value.
nums = [1, 2, 1, 2, 2, 1, 3, 3, 1]
# Output: 1

# * Given an array of distinct positive integer candidates and a target integer,
# return a list of all unique combinations of candidates where the chosen numbers sum to target.
# The same number may be chosen from candidates an unlimited number of times.
candidates = [2, 3, 6, 7]
target = 7
# Output: [[2, 2, 3], [7]]

# Given a string, return how many times the word balloon can be spelled from the letters in the string.
string = "nlaebolko"
# Output: 1

# * Given the names and grades for each student in a class of students, store them in a nested list
# and print the name(s) of any student(s) having the second lowest grade.
# Note: If there are multiple students with the second lowest grade, order their names alphabetically
# and print each name on a new line.
nested = [["Harry", 37.21], ["Berry", 37.21], ["Tina", 37.2], ["Akriti", 41], ["Harsh", 39]]
# Output:
# Berry
# Harry
