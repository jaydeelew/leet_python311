# 0. Prefix Sum
# Given an array, return a new array containing the running sum.
arr = [1, 2, 3, 4, 5]
# Output: [1, 3, 6, 10, 15]

# 344. Reverse String
# Write a function that reverses a string. The input string is given as an array of characters s.
# You must do this by modifying the input array in-place with O(1) extra memory.
lst = ["h","e","l","l","o"]
# Output: ["o","l","l","e","h"]

# 0. Sum All Nodes of a Graph
# Given a graph in adjacency list form and a starting node, return the sum of all nodes.
# Solve this iteratively
graph = {0: [2, 1], 1: [3], 2: [1], 3: []}
start = 0
# Output: 6

# 78. Subsets
# Given an integer array nums of unique elements, return all possible
# subsets (the power set).
# The solution set must not contain duplicate subsets: e.g. [1, 2] and [2, 1].
nums = [1, 2]
# Output: [[], [1], [2], [1, 2]]

# 392. Is Subsequence
# Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
# A subsequence of a string is a new string that is formed from the original string by
# deleting some (can be none) of the characters without disturbing the relative positions
# of the remaining characters.
s = "abc"
t = "ahbgdc"
# Output: True

# 46. Permutations
# Given an array nums of distinct integers, return all the possible permutations.
nums = [1, 2, 3]
# Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]].

# 704. Binary Search
# Given an array of integers nums which is sorted in ascending order,
# and an integer target, write a function to search target in nums.
# If target exists, then return its index. Otherwise, return -1.
# You must write an algorithm with O(log n) runtime complexity.
nums = [1, 2, 3, 4, 5]
target = 3
# Output: 2

# 0. Find Minimum Value That Satisfies a Condition
# Given a sorted array and a condition, find the minimum value in the array that satisfies the condition
# When finding the minimum, all values after it, including the minimum, would meet the condition,
# and all values before it would not meet the condition.
# This assumes the array is sorted.
arr = [1, 3, 5, 7, 9, 11]
condition = lambda x: x > 6
# Output: 7

# 0. Find Maximum Value That Satisfies a Condition
# Given a sorted array and a condition, find the maximum value in the array that satisfies the condition.
# A maximum would have all values before it, including the maximum, meet the condition.
# All values after the maximum would not meet the condition.
# This assumes the array is sorted.
arr = [1, 3, 5, 7, 9, 11]
condition = lambda x: x < 6
# Output: 5

# 0. TrieNode class
# Make a Trie class with methods for insert, locate, search, remove, and starts_with:
class TrieNode:
    def __init__(self):
        self.children = {}
        self.end_of_word = False
arr = ["arm", "arms", "at", "be", "bet"]

# 0. Dijkstra's Algorithm
# Implement Dijkstra's algorithm to find the shortest path between two nodes in a graph.
# The graph is represented as an adjacency list and the algorithm should return a dictionary of
# keys as nodes and values as the shortest distance from the start node to that node.
adj_list = {
    "S": {"A": 8, "B": 4},
    "A": {"B": 4},
    "B": {"A": 3, "C": 2, "D": 5},
    "C": {"D": 2},
    "D": {},
}
starting_node = "S"
# Output: {'S': 0, 'A': 7, 'B': 4, 'C': 6, 'D': 8}

# 0. Build Adjacency List
# Build an undirected adjacency list from list of edges.
edges = [(0, 1), (0, 3), (1, 3), (2, 3), (3, 5)]
# Output = {0: [1, 3], 1: [0, 3], 3: [0, 1, 2, 5], 2: [3], 5: [3]}

# 0. Monotonically Increasing Stack
# Given an integer array, return a monotonic increasing stack of the array.
arr = [1, 4, 5, 3, 3, 12, 10]
# Output: [1, 3, 10]

# 560. Subarray Sum Equals K
# Given an array of integers nums and an integer k,
# return the total number of subarrays whose sum equals to k.
# A subarray is a contiguous non-empty sequence of elements within an array.
# Integers can be negative where the sum of the elements in the subarray equals k. Integers can be positive and negative.
nums = [1, 2, 3, 4, 5]
k = 3
# Output: 2

# 0. Shortest Path Between Two Nodes
# Given a network of friends in the form of an adjacency list listing each person's list of friends,
# return the shortest path between them.
network = {
    "Min": ["William", "Jayden", "Omar"],
    "William": ["Min", "Noam"],
    "Jayden": ["Min", "Amelia", "Ren", "Noam"],
    "Ren": ["Jayden", "Omar"],
    "Amelia": ["Jayden", "Adam", "Miguel"],
    "Adam": ["Amelia", "Miguel", "Sofia", "Lucas"],
    "Miguel": ["Amelia", "Adam", "Liam", "Nathan"],
    "Noam": ["Nathan", "Jayden", "William"],
    "Omar": ["Ren", "Min", "Scott"],
}
start = "Jayden"
end = "Adam"
# Output: ['Jayden', 'Amelia', 'Adam']

# 0. List Levels in Graph
# Given a graph (in adjacency list form) and a starting node, list the contents of each level starting with the starting node.
directed = {0: [1, 2, 5], 1: [7], 2: [3, 4], 4: [3], 3: [6], 7: [0], 5: [], 6: []}
undirected = {0: [1, 2, 5, 7], 1: [0, 7], 2: [0, 3, 4], 5: [0], 7: [1, 0], 3: [2, 4, 6], 4: [2, 3], 6: [3]}
start_node = 0
# Output Directed Graph = [[0], [1, 2, 5], [7, 3, 4], [6]]
# Output Undirected Graph = [[0], [1, 2, 5, 7], [3, 4], [6]]

# 0. Rightmost Insert
# Given a sorted array and a target, return index of rightmost insertion point when duplicates are allowed.
# This function will return the index just after the last duplicate,
# otherwise, the index of the next highest value.
nums = [1, 2, 3, 3, 3, 4, 5]
target = 3
# Output: 5

# 0. Max Depth of Graph
# Given a directed acyclic graph (in adjacency list form) and a starting node,
# return the maximum depth of the graph from starting node to a leaf.
adj_list = {0: [2, 3], 1: [], 2: [], 3: [1]}
start_node = 0
# Output: 2

# 876. Middle of the Linked List
# Given a linked list of nodes where each node has a value and a next pointer,
# return the middle node of the linked list. If the linked list has an even number of nodes,
# return the second/right middle node.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
# Output: 3

# 0. Count Substrings
# Given a string and a substring, return the number of times a substring appears in a string.
string = "ABCDCDC"
sub_string = "CDC"
# Output: 2

# 1. Two Sum
# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
# You may assume that each input would have exactly one solution, and you may not use the same element twice.
# You can return the answer in any order.
nums = [3, 2, 4]
target = 6
# Output: [1,2]

# 658. Find K Closest Elements
# Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array.
# The result should also be sorted in ascending order.
# An integer a is closer to x than an integer b if:
# |a - x| < |b - x|, or
# |a - x| == |b - x| and a < b
arr = [1, 2, 3, 4, 5]
k = 4
x = 3
# Output: [1, 2, 3, 4]

# 0. Find K Closet Elements (unsorted array)
# Given an integer array arr, two integers k and target, return the k closest integers to targer in the array.
# The result should also be sorted in ascending order.
# An integer a is closer to x than an integer b if:
# |a - x| < |b - x|, or
# |a - x| == |b - x| and a < b
arr = [9, 1, 11, 6, 22, 7]
k = 3
x = 5
# Output: [1, 6, 7]

# 141. Linked List Cycle
# Given head, the head of a linked list, determine if the linked list has a cycle in it.
# There is a cycle in a linked list if there is some node in the list that can be reached
# again by continuously following the next pointer.
# Return true if there is a cycle in the linked list. Otherwise, return false.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
five.next = one
# Output: True

# 0. Max Depth Undirected Acyclic Graph
# Given an undirected cyclic graph (in adjacency list form) and a starting node,
# return the maximum depth of the graph from starting node to a leaf.
adj_list = {
    "a": ["b", "c", "e"],
    "b": ["a"],
    "c": ["a", "d"],
    "d": ["c"],
    "e": ["f"],
    "f": ["e", "g"],
    "g": ["f"],
}
# Output: 3

# 206. Reverse Linked List
# Reverse a singly linked list and return the head of the reversed list
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
# Output: 5 -> 4 -> 3 -> 2 -> 1

# 144. Binary Tree Preorder Traversal (iterative)
# Given the root of a binary tree, return the preorder traversal of its nodes' values.
nine = TreeNode(9)
seven = TreeNode(7)
four = TreeNode(4)
eight = TreeNode(8, nine)
twelve = TreeNode(12, four)
three = TreeNode(3, twelve, seven)
five = TreeNode(5, eight, three)  # root node
# Output: 5 8 9 3 12 4 7

# 739. Daily Temperatures
# Given an array of integers temperatures represents the daily temperatures,
# return an array answer such that answer[i] is the number of days you have to wait
# after the ith day to get a warmer temperature.
# If there is no future day for which this is possible, keep answer[i] == 0 instead.
# Given an array of characters, reverse the array in-place.
s = ["h", "e", "l", "l", "o"]
# Output: ["o", "l", "l", "e", "h"]

# 88. Merge Sorted Array
# You are given two integer arrays nums1 and nums2, sorted in non-decreasing order,
# and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
# Merge nums1 and nums2 into a single array sorted in non-decreasing order.
# The final sorted array should not be returned by the function,
# but instead be stored inside the array nums1. To accommodate this,
# nums1 has a length of m + n, where the first m elements denote the elements that should be merged,
# and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
nums1 = [1,2,3,0,0,0]
m = 3
nums2 = [2,5,6]
n = 3
# Output: [1,2,2,3,5,6]
# Explanation: The arrays we are merging are [1,2,3] and [2,5,6].

nums1 = [1]
m = 1
nums2 = []
n = 0
# Output: [1]
# Explanation: The arrays we are merging are [1] and [].

nums1 = [0]
m = 0
nums2 = [1]
n = 1
# Output: [1]
# Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

# 0. List Levels Binary Tree
# Given the root of a binary tree, return the levels of the tree from root on down in a list of lists.
class TreeNode:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
nine = TreeNode(9)
seven = TreeNode(7)
four = TreeNode(4)
eight = TreeNode(8, nine)
twelve = TreeNode(12, four)
three = TreeNode(3, twelve, seven)
five = TreeNode(5, eight, three)  # root node
# Output: [[5], [8, 3], [9, 12, 7], [4]]

# 325. Maximum Size Subarray Sum Equals k
# Given an array nums and a target value k, find the maximum length of a subarray that sums to k.
# If there isn't one, return 0 instead.
nums = [1, -1, 5, -2, 3]
k = 3
# Output: 4

# 0. Dijkstra's Algorithm
# Implement Dijkstra's algorithm to find the shortest path between two nodes in a graph.
# The graph is represented as an adjacency matrix and the algorithm should return a dictionary of
# keys as nodes and values as the shortest distance from the start node to that node.
adj_matrix = [
    [0, 8, 4, 0, 0],
    [0, 0, 4, 0, 0],
    [0, 3, 0, 2, 5],
    [0, 0, 0, 0, 2],
    [0, 0, 0, 0, 0],
]
starting_node = 0
# Output: {0: 0, 1: 7, 2: 4, 3: 6, 4: 8}

# 0. Top K Elements
# Given an array of integers, find the top k elements in arr.
# The result order does not matter.
arr = [3, 6, 7, 2, 9, 4]
k = 3
# Output: [6, 7, 9]

# 300. Longest Increasing Subsequence
# Given an integer array nums, return the length of the longest strictly increasing subsequence.
# The term strictly means that there are not any duplicates in the subsequence.
# Provide an iterative solution.
nums = [10, 9, 2, 5, 3, 7, 101, 18]
# Output: 4

# 215. Kth Largest Element in an Array
# Given an integer array nums and an integer k, return the kth largest element in the array.
# Note that it is the kth largest element in the sorted order, not the kth distinct element.
# Can you solve it without sorting?
arr = [3, 6, 7, 2, 9, 4]
k = 3
# Output: 6

# 169. Majority Element
# Given an array nums of size n, return the majority element.
# The majority element is the element that appears more than n / 2 times.
# You may assume that the majority element always exists in the array.
nums = [2, 2, 1, 1, 1, 2, 2]
# Output: 2

# 144. Binary Tree Preorder Traversal (recursive)
# Given the root of a binary tree, return the preorder traversal of its nodes' values.
class TreeNode:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
nine = TreeNode(9)
seven = TreeNode(7)
four = TreeNode(4)
eight = TreeNode(8, nine)
twelve = TreeNode(12, four)
three = TreeNode(3, twelve, seven)
five = TreeNode(5, eight, three)  # root node
# Output: 5 8 9 3 12 4 7

# 367. Valid Perfect Square
# Given a positive integer num, return true if num is a perfect square or false otherwise.
# A perfect square is an integer that is the square of an integer.
# In other words, it is the product of some integer with itself.
# You must not use any built-in library function, such as sqrt.
num = 16
# Output: True

# 69. Sqrt(x)
# Given a non-negative integer x, return the square root of x rounded down to the nearest integer.
# The returned integer should be non-negative as well.
# You must not use any built-in exponent function or operator.
num = 16
# Output: 4

# 0. Kth From The End
# Given a singly linked list, return the value of the kth node from the end of the list.
class ListNode:
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
k = 2
# Output: 4

# 0. Is Subset
# Given two strings, a and b, return True if a is a subset of b, otherwise return False.
a = "3 1 9 9"
b = "5 0 7 9 4 1 3 9 6"
# Output: True

# 0. Sum All Nodes of a Graph
# Given a graph in adjacency list form, return the sum of all nodes.
# Solve this recursively
graph = {0: [2, 1], 1: [3], 2: [1], 3: []}
# Output: 6

# 0. Max Sum to Leaf in a Graph
# Given a directed acyclic graph (in adjacency list form) and a starting node,
# return the maximum sum of the graph from starting node to a leaf.
adj_list = {0: [2, 3], 1: [], 2: [], 3: [1]}
start = 0

# 0. Max Depth Undirected Cyclic Graph
# Given an undirected cyclic graph (in adjacency list form) and a starting node,
# return the maximum depth of the graph from starting node to a leaf.
adj_list = {
    "a": ["b", "c"],
    "b": ["a", "c", "d"],
    "c": ["a", "b", "d"],
    "d": ["b", "c"],
}
# Output: 3

adj_list_2 = {
    "p": ["q", "s", "r"],
    "q": ["p", "t", "u"],
    "r": ["p", "v", "x"],
    "s": ["p", "w", "x"],
    "t": ["q", "u"],
    "u": ["q", "t"],
    "v": ["r", "w"],
    "w": ["s", "v"],
    "x": ["r", "s"],
}
# 112. Path Sum
# Given the root of a binary tree and an integer targetSum,
# return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.
class TreeNode:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
one = TreeNode(1)
seven = TreeNode(7)
two = TreeNode(2)
thirteen = TreeNode(13)
three = TreeNode(3, twelve, seven)
eleven = TreeNode(11, seven, two)
eight = TreeNode(8, thirteen, four_b)
four_a = TreeNode(4, eleven)
four_b = TreeNode(4, right = one) 
five = TreeNode(5, four_a, eight)  # root node
targetSum = 22
# Output: True

# 0. Lefmost Insert
# Given a sorted array, return index of leftmost insertion point when duplicates are allowed
# This function will return the index of the first duplicate,
# otherwise, the index of the next highest value.
nums = [1, 2, 3, 3, 3, 4, 5]
target = 3
# Output: 2

# 300. Longest Increasing Subsequence
# Given an integer array nums, return the length of the longest strictly increasing subsequence.
# The term strictly means that there are not any duplicates in the subsequence.
# Provide a recursive solution.
nums = [10, 9, 2, 5, 3, 7, 101, 18]
# Output: 4

# 0. Factorial
# Given a positive integer n, write a function to return the factorial of n.
n = 5
# Output: 120

# 39. Combination Sum
# Given an array of distinct positive integer candidates and a target integer,
# return a list of all unique combinations of candidates where the chosen numbers sum to target.
# The same number may be chosen from candidates an unlimited number of times.
candidates = [2, 3, 6, 7]
target = 7
# Output: [[2, 2, 3], [7]]

# 1189. Maximum Number of Balloons
# Given a string text, you want to use the characters of text to form as many instances of the word "balloon" as possible.
# You can use each character in text at most once. Return the maximum number of instances that can be formed.
string = "nlaebolko"
# Output: 1

# 0. Second Lowest
# Given the names and grades for each student in a class of students, store them in a nested list
# and print the name(s) of any student(s) having the second lowest grade.
# Note: If there are multiple students with the second lowest grade, order their names alphabetically
# and print each name on a new line.
nested = [["Harry", 37.21], ["Berry", 37.21], ["Tina", 37.2], ["Akriti", 41], ["Harsh", 39]]
# Output:
# Berry
# Harry

# 0. Merge Sorted Arrays
# Given two sorted integer arrays, return a new sorted array that combines both of them and is also sorted.
arr1 = [1, 4, 7, 20]
arr2 = [3, 5, 6]
# Output: [1, 3, 4, 5, 6, 7, 20]

# 77. Combinations
# Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].
# You may return the answer in any order.
n = 4
k = 2
# Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]

# 0. Max Sum Undirected Cyclical Graph
# Given an undirected cyclical graph and a starting node, return the maximum distance from the starting
# node going through all other nodes and not visiting any node more than once.
adj_list = {
    "p": {"q": 7, "r": 3, "s": 2},
    "q": {"p": 7, "t": 4, "u": 1},
    "r": {"p": 3, "v": 5, "x": 2},
    "s": {"p": 2, "w": 6, "x": 2},
    "t": {"q": 4, "u": 3},
    "u": {"q": 1, "t": 3},
    "v": {"r": 5, "w": 4},
    "w": {"s": 6, "v": 4},
    "x": {"r": 2, "s": 2},
}
# Output: 20

# 33. Search in Rotated Sorted Array
# There is an integer array nums sorted in ascending order (with distinct values).
# Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length)
# such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed).
# For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
# Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums,
# or -1 if it is not in nums.
# You must write an algorithm with O(log n) runtime complexity.
nums = [3, 4, 5, 6, 7, 0, 1, 2]
target = 5
# Output: 2

# 509. Fibonacci Number
# The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence,
# such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,
# Given n, calculate F(n).
n = 20
# Output: 6765

# 0. Given n, return True if n is prime, otherwise return false.

# 204. Count Primes
# Given an integer n, return the number of prime numbers that are strictly less than n.

# 1143. Longest Common Subsequence
# Given two strings text1 and text2, return the length of their longest common subsequence.
# If there is no common subsequence, return 0.
# A subsequence of a string is a new string generated from the original string with some
# characters (can be none) deleted without changing the relative order of the remaining characters.
# For example, "ace" is a subsequence of "abcde".
# A common subsequence of two strings is a subsequence that is common to both strings.
s1 = "ABCBDAB"
s2 = "BDCABC"
# Output: 4

# 0. Reverse String
# Given a string, reverse the string and return the reversed string.

# 70. Climbing Stairs
# You are climbing a staircase. It takes n steps to reach the top.
# Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
n = 2
# Output: 2
n = 3
# Output: 3

# 0. Detect Cycle Directed Graph
# Given a directed graph in the form of an adjacency list and a starting node,
# return True if the graph contains a cycle, otherwise False.
graph = {0: [1], 1: [2], 2: [0], 3: [4], 4: []}  # Graph with a cycle (0 -> 1 -> 2 -> 0)
# Output: True
# graph = {0: [1, 2], 1: [2], 2: []}  # Graph without cycle.
# Output: False

# 0. Detect Cycle Undirected Graph
# Given an undirected graph in the form of an adjacency list and a starting node,
# return True if the graph contains a cycle, otherwise False.
graph = {0: [1, 2], 1: [0, 2], 2: [0, 1], 3: [4], 4: [3]}  # Graph with a cycle (0 <-> 1 <-> 2 <-> 0)
# Output: True
# graph = {0: [1, 2], 1: [0], 2: [0], 3: [4], 4: [3]}  # Graph without a cycle (0 <-> 1 <-> 2 <-> 3)
# Output: False

# 1004. Max Consecutive Ones III
# Given a binary array nums and an integer k,
# return the maximum number of consecutive 1's in the array if you can flip at most k 0's

# 0. Kahn's Algorithm
# Given a directed adj_list in the form an adjacency list, return a array of the topological ordering of the nodes.
# If this is not possible, return None.

# 138. Copy List with Random Pointer
# A linked list of length n is given such that each node contains an additional random pointer,
# which could point to any node in the list, or null.
# Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes,
# where each new node has its value set to the value of its corresponding original node.
# Both the next and random pointer of the new nodes should point to new nodes in
# the copied list such that the pointers in the original list and copied list represent the same list state.
# None of the pointers in the new list should point to nodes in the original list.
# For example, if there are two nodes X and Y in the original list, where X.random --> Y,
# then for the corresponding two nodes x and y in the copied list, x.random --> y.
# Return the head of the copied linked list.
# The linked list is represented in the input/output as a list of n nodes.
# Each node is represented as a pair of [val, random_index] where:
# - val: an integer representing Node.val
# - random_index: the index of the node (range from 0 to n-1) that the random pointer points to,
# or null if it does not point to any node.
# Your code will only be given the head of the original linked list.
########################################################################
class Node:
    def __init__(self, val, next=None, random=None):
        self.val = val
        self.next = next
        self.random = random
def printLinkedList(head):
    ans = []
    curr_node = head
    while curr_node:
        randomPtr = None
        if curr_node.random:
            randomPtr = curr_node.random.val
        ans.append([curr_node.val, randomPtr])
        curr_node = curr_node.next
    print(ans)
# Creating a linked list: 7 -> 13 -> 11 -> 10 -> 1
# with random pointers: [7,null] -> [13,7] -> [11,1] -> [10,11] -> [1,7]
one = Node(1)
ten = Node(10)
eleven = Node(11)
thirteen = Node(13)
seven = Node(7)  # head
one.next = None
one.random = seven
ten.next = one
ten.random = eleven
eleven.next = ten
eleven.random = one
thirteen.next = eleven
thirteen.random = seven
seven.next = thirteen
seven.random = None