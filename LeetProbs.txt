Given an array, return a new array with the prefix sum.
e.g. [1, 2, 3, 4, 5] -> [1, 3, 6, 10, 15]

Given a string, reverse the string and return the reversed string.
e.g. "hello" -> "olleh"

Given an array, return all combinations. Order does not matter, e.g. we should not have duplicates [1, 2] and [2, 1].
e.g. nums = [1, 2] -> [[], [1], [2], [1, 2]]

Given an array nums of distinct integers, return all the possible permutations.
e.g. nums = [1, 2, 3] -> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].

Given a sorted array and a target, return index of target if found, return insertion index if not found.
e.g. nums = [1, 2, 3, 4, 5], target = 3 -> 2

Given a sorted array and a condition, find the minimum value in the array that satisfies the condition
When finding the minimum, all values after it, including the minimum, would meet the condition,
and all values before it would not meet the condition.
This assumes the array is sorted.
e.g. arr = [1, 3, 5, 7, 9, 11], condition = lambda x: x > 6 -> 7

Given a sorted array and a condition, find the maximum value in the array that satisfies the condition.
A maximum would have all values before it, including the maximum, meet the condition.
All values after the maximum would not meet the condition.
This assumes the array is sorted.
e.g. arr = [1, 3, 5, 7, 9, 11], condition = lambda x: x < 6 -> 5

Make a Trie class with methods for insert, search, remove, and starts_with:   
class TrieNode:
    def __init__(self):
        self.children = {}
        self.end_of_word = False

Implement Dijkstra's algorithm to find the shortest path between two nodes in a graph.
The graph is represented as an adjacency list and the algorithm should return a dictionary of 
keys as nodes and values as the shortest distance from the start node to that node.
adj_list = {
    "S": {"A": 8, "B": 4},
    "A": {"B": 4},
    "B": {"A": 3, "C": 2, "D": 5},
    "C": {"D": 2},
    "D": {},
}
starting_node = "S"
Output: {'S': 0, 'A': 7, 'B': 4, 'C': 6, 'D': 8}

Build an undirected adjacency dictionary from list of edges.
edges = [(0, 1), (0, 3), (1, 3), (2, 3), (3, 5)]
Output = {0: [1, 3], 1: [0, 3], 3: [0, 1, 2, 5], 2: [3], 5: [3]}

Given an array of integers and an integer k, return the number of subarrays
where the sum of the elements in the subarray equals k.
e.g. nums = [1, 2, 3, 4, 5], k = 3 -> 2

# Given a network of friends in the form of an adjacency list, return the shortest path between two people.
network = {
    "Min": ["William", "Jayden", "Omar"],
    "William": ["Min", "Noam"],
    "Jayden": ["Min", "Amelia", "Ren", "Noam"],
    "Ren": ["Jayden", "Omar"],
    "Amelia": ["Jayden", "Adam", "Miguel"],
    "Adam": ["Amelia", "Miguel", "Sofia", "Lucas"],
    "Miguel": ["Amelia", "Adam", "Liam", "Nathan"],
    "Noam": ["Nathan", "Jayden", "William"],
    "Omar": ["Ren", "Min", "Scott"],
}
start = "Jayden"
end = "Adam"
Output: ['Jayden', 'Amelia', 'Adam']

Given a graph (in adjacency list form) and a starting node, list the contents of each level starting with the starting node.
directed = {0: [1, 2, 5], 1: [7], 2: [3, 4], 4: [3], 3: [6], 7: [0], 5: [], 6: []}
undirected = {0: [1, 2, 5, 7], 1: [0, 7], 2: [0, 3, 4], 5: [0], 7: [1, 0], 3: [2, 4, 6], 4: [2, 3], 6: [3]}
Output Directed Graph = [[0], [1, 2, 5], [7, 3, 4], [6]]
Output Undirected Graph = [[0], [1, 2, 5, 7], [3, 4], [6]]

Given a sorted array and a target, return index of right most insertion point when duplicates are allowed.
This function will return the index just after the last duplicate,
otherwise, the index of the next highest value.
e.g. nums = [1, 2, 3, 3, 3, 4, 5], target = 3 -> 5

Given a graph (in adjacency list form) and a starting node, return the max depth of the graph from starting node to a leaf.
adj_list = {0: [2, 3], 1: [3], 2: [0], 3: [0, 1]} -> 2

Given a linked list of nodes where each node has a value and a next pointer,
return the middle node of the linked list. If the linked list has an even number of nodes,
return the second/right middle node.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
Output: 3

Given a string and a substring, return the number of times a substring appears in a string.
e.g string = "ABCDCDC", sub_string = "CDC" -> 2

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
e.g. nums = [3, 2, 4], target = 6 -> [1,2]

Given a list of numbers with duplicate values, create three functions to count the number of occurrences of each value
and return a dictionary with the count of each value. Use a standard dictionary, a Counter, and a defaultdict.
e.g. [1, 2, 2, 3, 3, 3] -> {1: 1, 2: 2, 3: 3}

Given an array of integers and an integer k,
return the number of subarrays where the sum of the elements in the subarray equals k.
e.g. nums = [1, 2, 3, 4, 5], k = 3 -> 2

Given an array of integers, find the top k elements that are closest to target.
e.g. arr = [3, 6, 7, 2, 9, 4], k = 3, target = 5 -> [6, 7, 4]

Given a linked list of nodes where each node has a value and a next pointer,
determine if the linked list has a cycle.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
five.next = one
Output: True

Given a singly linked list, reverse the list and return the head of the reversed list.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
Output: 5 -> 4 -> 3 -> 2 -> 1

Given an integer array, return a monotonic increasing stack of the array.
arr = [1, 4, 5, 3, 3, 12, 10] -> [1, 3, 10]

Given an array of characters, reverse the array in-place.
e.g. s = ["h", "e", "l", "l", "o"] -> ["o", "l", "l", "e", "h"]

Given two sorted integer arrays, return an array that combines both of them and is also sorted in O(n+m) time.
arr1 = [1, 4, 7, 20]
arr2 = [3, 5, 6]
Output: [1, 3, 4, 5, 6, 7, 20]

Given the root of a binary tree, return the levels of the tree from root on down in a list of lists.
class TreeNode:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
nine = TreeNode(9)
seven = TreeNode(7)
four = TreeNode(4)
eight = TreeNode(8, nine)
twelve = TreeNode(12, four)
three = TreeNode(3, twelve, seven)
five = TreeNode(5, eight, three)  # root node
Output: [[5], [8, 3], [9, 12, 7], [4]]

Given an array of positive integers nums and an integer k,
find the length of the longest subarray whose sum is less than or equal to k.
e.g. nums = [1, 2, 3, 4, 5], k = 10 -> 4

Implement Dijkstra's algorithm to find the shortest path between two nodes in a graph.
The graph is represented as an adjacency matrix and the algorithm should return a dictionary of 
keys as nodes and values as the shortest distance from the start node to that node.
adj_matrix = [
    [0, 8, 4, 0, 0],
    [0, 0, 4, 0, 0],
    [0, 3, 0, 2, 5],
    [0, 0, 0, 0, 2],
    [0, 0, 0, 0, 0],
]
starting_node = 0
# Output: {0: 0, 1: 7, 2: 4, 3: 6, 4: 8}

Given an array of integers, find the top k elements in arr.
e.g. arr = [3, 6, 7, 2, 9, 4], k = 3 -> [6, 7, 9]

Given an integer array nums, return the length of the longest strictly increasing subsequence.
The term strictly means that there are not any duplicates in the subsequence.
Provide the Bottom-Up Iterative Tabulation solution.
Provide the Top-Down Recursive Memoization solution.
e.g. nums = [10, 9, 2, 5, 3, 7, 101, 18] -> 4

Given an array of unsorted integers, return the kth largest element in arr.
e.g. arr = [3, 6, 7, 2, 9, 4], k = 3 -> 6

Given an array of integers and an integer k, return all subsequences with sum k.
e.g. nums = [1, 2, 3, 4, 5], k = 5 -> [[1, 4], [2, 3], [5]]

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than n / 2 times.
You may assume that the majority element always exists in the array.
e.g. nums = [2, 2, 1, 1, 1, 2, 2] -> 2

Perform a DFS on a binary tree using an iterative approach. Return the pre-order traversal of the tree's nodes.
Perform a DFS on a binary tree using an recursive approach. Return the pre-order traversal of the tree's nodes.
nine = TreeNode(9)
seven = TreeNode(7)
four = TreeNode(4)
eight = TreeNode(8, nine)
twelve = TreeNode(12, four)
three = TreeNode(3, twelve, seven)
five = TreeNode(5, eight, three)  # root node
Output: 5 8 9 3 12 4 7

Write a function that determines if a given number is a perfect square.
It takes an integer `num` as a parameter and returns a boolean value.
The function returns `True` if `num` is a perfect square, otherwise it returns `False`.
e.g. num = 16 -> True

Find the square root of a number using binary search
e.g. num = 16 -> 4

Given a singly linked list, return the kth node from the end of the list.
five = ListNode(5)
four = ListNode(4, five)
three = ListNode(3, four)
two = ListNode(2, three)
one = ListNode(1, two)  # head
k = 2
Output: 4

Given two strings, a and b, return True if a is a subset of b, otherwise return False.
e.g a = "3 1 9 9", b = "5 0 7 9 4 1 3 9 6" -> True

Given a graph (in adjacency list form) and a starting node, return the max sum of the graph from root to starting node.
e.g. edges = {0: [2, 3], 1: [3], 2: [0], 3: [0, 1]} -> 4

Given a sorted array, return index of left most insertion point when duplicates are allowed
This function will return the index of the first duplicate,
otherwise, the index of the next highest value.
e.g. nums = [1, 2, 3, 3, 3, 4, 5], target = 3 -> 2

Given a list of numbers with duplicate values, return the most common value.
e.g. [1, 2, 1, 2, 2, 1, 3, 3, 1] -> 1

Given an array of distinct positive integer candidates and a target integer,
return a list of all unique combinations of candidates where the chosen numbers sum to target.
The same number may be chosen from candidates an unlimited number of times.
e.g. candidates = [2, 3, 6, 7], target = 7 -> [[2, 2, 3], [7]]

Given a string, return how many time the word balloon can be spelled from the letters in the string.
e.g. string = ""nlaebolko" -> 1

Given the names and grades for each student in a class of students, store them in a nested list
and print the name(s) of any student(s) having the second lowest grade.
Note: If there are multiple students with the second lowest grade, order their names alphabetically
and print each name on a new line.
e.g. nested = [["Harry", 37.21], ["Berry", 37.21], ["Tina", 37.2], ["Akriti", 41], ["Harsh", 39]]
Output:
Berry
Harry